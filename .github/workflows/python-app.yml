# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python application

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: 
      - main 
      - 'dev/*.*'

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      # You can use PyPy versions in python-version.
      # For example, pypy-3.8
      matrix:
        python-version: ["3.7", "3.8", "3.9", "3.10"]
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Display Python version
      run: python -c "import sys; print(sys.version)"

    - name: Install pip dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        python -m pip install requests        
    - name: Run NextBus.py
      run: |
        echo "üéâ The job was automatically triggered by a ${{ github.event_name }} event."
        echo "üêß This job is now running on a ${{ runner.os }} server hosted by GitHub!"
        echo "üîé The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
    #Check out repository code
        echo "üí° The ${{ github.repository }} repository has been cloned to the runner."
        echo "üñ•Ô∏è The workflow is now ready to test your code on the runner."
    # Run the NextBus with sample scenarios    
        python nextbus.py 'Metro Blue Line' 'Target Field Station Platform 2' 'South' --doctest-modules --junitxml=junit/test-results-${{ matrix.python-version }}.xml
        python nextbus.py 'Metro Blue Line' 'U.S. Bank Stadium Station' 'South' --doctest-modules --junitxml=junit/test-results-${{ matrix.python-version }}.xml
    
    - name: Upload pytest test results
      uses: actions/upload-artifact@v3
      with:
        name: pytest-results-${{ matrix.python-version }}
        path: junit/test-results-${{ matrix.python-version }}.xml
      # Use always() to always run this step to publish test results when there are test failures
      if: ${{ always() }}  

    - name: List files in the repository
      run: |
        ls ${{ github.workspace }}
        echo "üçè This job's status is ${{ job.status }}."

